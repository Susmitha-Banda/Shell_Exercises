#include <stdio.h>
#include <stdlib.h>
#include <string.h>

extern char **environ;

// Function to check if a variable exists in the environment
int isVariableExists(const char *name) {
    char **env = environ;
    while (*env != NULL) {
        char *pos = strchr(*env, '=');
        if (pos != NULL) {
            if (strncmp(*env, name, pos - *env) == 0 && name[pos - *env] == '\0') {
                return 1;
            }
        }
        env++;
    }
    return 0;
}

// Function to add or modify an environment variable
int _setenv(const char *name, const char *value, int overwrite) {
    if (name == NULL || name[0] == '\0' || strchr(name, '=') != NULL) {
        errno = EINVAL;
        return -1;
    }

    if (!overwrite && isVariableExists(name)) {
        return 0; // If overwrite is not allowed and variable exists, do nothing
    }

    // Construct the new environment variable string
    size_t len_name = strlen(name);
    size_t len_value = strlen(value);
    size_t len_total = len_name + 1 + len_value + 1; // +1 for '=' and +1 for '\0'
    char *new_env_var = (char *)malloc(len_total);
    if (new_env_var == NULL) {
        errno = ENOMEM;
        return -1;
    }
    snprintf(new_env_var, len_total, "%s=%s", name, value);

    // Find the index of the variable if it already exists
    int index = -1;
    char **env = environ;
    int i = 0;
    while (*env != NULL) {
        char *pos = strchr(*env, '=');
        if (pos != NULL) {
            if (strncmp(*env, name, pos - *env) == 0 && name[pos - *env] == '\0') {
                index = i;
                break;
            }
        }
        env++;
        i++;
    }

    // If variable exists, replace it; otherwise, add it to the end
    if (index != -1) {
        free(environ[index]); // Free the old environment variable
        environ[index] = new_env_var;
    } else {
        // Count the number of environment variables
        int count = 0;
        env = environ;
        while (*env != NULL) {
            env++;
            count++;
        }
        
        // Allocate memory for the new environment variable array
        char **new_environ = (char **)malloc((count + 2) * sizeof(char *));
        if (new_environ == NULL) {
            free(new_env_var);
            errno = ENOMEM;
            return -1;
        }

        // Copy the existing environment variables
        env = environ;
        for (int j = 0; j < count; j++) {
            new_environ[j] = *env;
            env++;
        }

        // Add the new environment variable
        new_environ[count] = new_env_var;
        new_environ[count + 1] = NULL;

        // Replace the old environment variable array
        environ = new_environ;
    }

    return 0;
}

int main() {
    // Test the _setenv function
    _setenv("MY_VAR", "123", 1);
    _setenv("NEW_VAR", "456", 0);
    _setenv("MY_VAR", "789", 1); // Overwrite MY_VAR

    // Print the updated environment
    char **env = environ;
    while (*env != NULL) {
        printf("%s\n", *env);
        env++;
    }

    return 0;
}

